using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Invulnerability : MonoBehaviour
{
    private bool isInvulnerable = false;
    [SerializeField] private float invulnerabilityDuration;
    private Renderer playerRenderer;
    private Material originalMaterial;
    private Material invulnerableMaterial;
    private Coroutine blinkCoroutine;

    private void Start()
    {
        playerRenderer = GetComponent<Renderer>();
        originalMaterial = playerRenderer.material;
        invulnerableMaterial = CreateInvulnerableMaterial(originalMaterial);
    }

    private Material CreateInvulnerableMaterial(Material originalMaterial)
    {
        Material invulnerableMat = new Material(originalMaterial);
        invulnerableMat.color *= 4f;

        return invulnerableMat;
    }

    private void OnTriggerEnter(Collider other)
    {
        if (isInvulnerable)
            return;

        if (other.gameObject.CompareTag("EnemyBullet") || other.gameObject.CompareTag("Enemy") || other.gameObject.CompareTag("MegaEnemy") || other.gameObject.CompareTag("Enemy1") || other.gameObject.CompareTag("MegaEnemy1"))
        {
            StartCoroutine(ActivateInvulnerability());
        }
    }

    private IEnumerator ActivateInvulnerability()
    {
        isInvulnerable = true;

        Collider[] colliders = GetComponentsInChildren<Collider>();
        foreach (Collider collider in colliders)
        {
            collider.enabled = false;
        }

        playerRenderer.material = invulnerableMaterial;

        blinkCoroutine = StartCoroutine(BlinkRenderer());

        yield return new WaitForSeconds(invulnerabilityDuration);

        StopCoroutine(blinkCoroutine);
        playerRenderer.enabled = true;

        foreach (Collider collider in colliders)
        {
            collider.enabled = true;
        }

        playerRenderer.material = originalMaterial;

        isInvulnerable = false;
    }

    private IEnumerator BlinkRenderer()
    {
        while (true)
        {
            playerRenderer.enabled = !playerRenderer.enabled;
            yield return new WaitForSeconds(0.2f);
        }
    }
}